/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    '\n    query SubscriptionList {\n        subscriptions(first: 500) {\n            edges {\n                node {\n                    note\n                    name\n                    startDate\n                    endDate\n                    tag\n                    productId\n                    portSubscriptionInstanceId\n                    vlanRange\n                    description\n                    product {\n                        name\n                        type\n                        tag\n                    }\n                    insync\n                    status\n                    subscriptionId\n                }\n            }\n        }\n    }\n':
        types.SubscriptionListDocument,
    '\n    query GetSubscriptionDetailOutline($id: ID!) {\n        subscription(id: $id) {\n            customerId\n            description\n            endDate\n            firewallEnabled\n            fixedInputs\n            insync\n            note\n            product {\n                name\n                status\n                endDate\n                description\n                tag\n                type\n            }\n            startDate\n            status\n            subscriptionId\n            customerDescriptions {\n                description\n            }\n            organisation {\n                abbreviation\n                name\n                website\n                tel\n            }\n            locations {\n                abbreviation\n                name\n            }\n        }\n    }\n':
        types.GetSubscriptionDetailOutlineDocument,
    '\n    query GetSubscriptionDetailComplete($id: ID!) {\n        subscription(id: $id) {\n            customerId\n            description\n            endDate\n            firewallEnabled\n            fixedInputs\n            insync\n            note\n            product {\n                name\n                status\n                endDate\n                description\n                tag\n                type\n            }\n            startDate\n            status\n            subscriptionId\n            customerDescriptions {\n                description\n            }\n            organisation {\n                abbreviation\n                name\n                website\n                tel\n            }\n            locations {\n                abbreviation\n                name\n            }\n            name\n            inUseBy {\n                description\n                tag\n                subscriptionId\n                status\n            }\n            dependsOn {\n                description\n                subscriptionId\n                status\n            }\n            imsCircuits {\n                ims {\n                    aliases\n                    allEndpoints {\n                        id\n                        locationOwner {\n                            customerId\n                            name\n                            abbreviation\n                            email\n                            fax\n                            status\n                            tel\n                            website\n                        }\n                        type\n                        vlanranges\n                        ... on ImsPort {\n                            id\n                            fiberType\n                            connectorType\n                            ifaceType\n                            lineName\n                            node\n                            status\n                            port\n                            patchposition\n                            vlanranges\n                            type\n                        }\n                        ... on ImsInternalPort {\n                            id\n                            lineName\n                            node\n                            port\n                            type\n                            vlanranges\n                        }\n                        ... on ImsService {\n                            id\n                            location\n                            service {\n                                aliases\n                                domain\n                                product\n                                status\n                                name\n                                id\n                                speed\n                                extraInfo\n                            }\n                        }\n                    }\n                    id\n                    location\n                    extraInfo\n                    name\n                    speed\n                    status\n                    product\n                }\n                imsCircuitId\n            }\n        }\n    }\n':
        types.GetSubscriptionDetailCompleteDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query SubscriptionList {\n        subscriptions(first: 500) {\n            edges {\n                node {\n                    note\n                    name\n                    startDate\n                    endDate\n                    tag\n                    productId\n                    portSubscriptionInstanceId\n                    vlanRange\n                    description\n                    product {\n                        name\n                        type\n                        tag\n                    }\n                    insync\n                    status\n                    subscriptionId\n                }\n            }\n        }\n    }\n',
): (typeof documents)['\n    query SubscriptionList {\n        subscriptions(first: 500) {\n            edges {\n                node {\n                    note\n                    name\n                    startDate\n                    endDate\n                    tag\n                    productId\n                    portSubscriptionInstanceId\n                    vlanRange\n                    description\n                    product {\n                        name\n                        type\n                        tag\n                    }\n                    insync\n                    status\n                    subscriptionId\n                }\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query GetSubscriptionDetailOutline($id: ID!) {\n        subscription(id: $id) {\n            customerId\n            description\n            endDate\n            firewallEnabled\n            fixedInputs\n            insync\n            note\n            product {\n                name\n                status\n                endDate\n                description\n                tag\n                type\n            }\n            startDate\n            status\n            subscriptionId\n            customerDescriptions {\n                description\n            }\n            organisation {\n                abbreviation\n                name\n                website\n                tel\n            }\n            locations {\n                abbreviation\n                name\n            }\n        }\n    }\n',
): (typeof documents)['\n    query GetSubscriptionDetailOutline($id: ID!) {\n        subscription(id: $id) {\n            customerId\n            description\n            endDate\n            firewallEnabled\n            fixedInputs\n            insync\n            note\n            product {\n                name\n                status\n                endDate\n                description\n                tag\n                type\n            }\n            startDate\n            status\n            subscriptionId\n            customerDescriptions {\n                description\n            }\n            organisation {\n                abbreviation\n                name\n                website\n                tel\n            }\n            locations {\n                abbreviation\n                name\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query GetSubscriptionDetailComplete($id: ID!) {\n        subscription(id: $id) {\n            customerId\n            description\n            endDate\n            firewallEnabled\n            fixedInputs\n            insync\n            note\n            product {\n                name\n                status\n                endDate\n                description\n                tag\n                type\n            }\n            startDate\n            status\n            subscriptionId\n            customerDescriptions {\n                description\n            }\n            organisation {\n                abbreviation\n                name\n                website\n                tel\n            }\n            locations {\n                abbreviation\n                name\n            }\n            name\n            inUseBy {\n                description\n                tag\n                subscriptionId\n                status\n            }\n            dependsOn {\n                description\n                subscriptionId\n                status\n            }\n            imsCircuits {\n                ims {\n                    aliases\n                    allEndpoints {\n                        id\n                        locationOwner {\n                            customerId\n                            name\n                            abbreviation\n                            email\n                            fax\n                            status\n                            tel\n                            website\n                        }\n                        type\n                        vlanranges\n                        ... on ImsPort {\n                            id\n                            fiberType\n                            connectorType\n                            ifaceType\n                            lineName\n                            node\n                            status\n                            port\n                            patchposition\n                            vlanranges\n                            type\n                        }\n                        ... on ImsInternalPort {\n                            id\n                            lineName\n                            node\n                            port\n                            type\n                            vlanranges\n                        }\n                        ... on ImsService {\n                            id\n                            location\n                            service {\n                                aliases\n                                domain\n                                product\n                                status\n                                name\n                                id\n                                speed\n                                extraInfo\n                            }\n                        }\n                    }\n                    id\n                    location\n                    extraInfo\n                    name\n                    speed\n                    status\n                    product\n                }\n                imsCircuitId\n            }\n        }\n    }\n',
): (typeof documents)['\n    query GetSubscriptionDetailComplete($id: ID!) {\n        subscription(id: $id) {\n            customerId\n            description\n            endDate\n            firewallEnabled\n            fixedInputs\n            insync\n            note\n            product {\n                name\n                status\n                endDate\n                description\n                tag\n                type\n            }\n            startDate\n            status\n            subscriptionId\n            customerDescriptions {\n                description\n            }\n            organisation {\n                abbreviation\n                name\n                website\n                tel\n            }\n            locations {\n                abbreviation\n                name\n            }\n            name\n            inUseBy {\n                description\n                tag\n                subscriptionId\n                status\n            }\n            dependsOn {\n                description\n                subscriptionId\n                status\n            }\n            imsCircuits {\n                ims {\n                    aliases\n                    allEndpoints {\n                        id\n                        locationOwner {\n                            customerId\n                            name\n                            abbreviation\n                            email\n                            fax\n                            status\n                            tel\n                            website\n                        }\n                        type\n                        vlanranges\n                        ... on ImsPort {\n                            id\n                            fiberType\n                            connectorType\n                            ifaceType\n                            lineName\n                            node\n                            status\n                            port\n                            patchposition\n                            vlanranges\n                            type\n                        }\n                        ... on ImsInternalPort {\n                            id\n                            lineName\n                            node\n                            port\n                            type\n                            vlanranges\n                        }\n                        ... on ImsService {\n                            id\n                            location\n                            service {\n                                aliases\n                                domain\n                                product\n                                status\n                                name\n                                id\n                                speed\n                                extraInfo\n                            }\n                        }\n                    }\n                    id\n                    location\n                    extraInfo\n                    name\n                    speed\n                    status\n                    product\n                }\n                imsCircuitId\n            }\n        }\n    }\n'];

export function gql(source: string) {
    return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
    TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
